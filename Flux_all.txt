1, install library
npm install --save flux
or thêm dòng sau tới package.json và chạy npm install
"flux": "~2.1.1"

2, constants.js định nghĩa tên các actions trong ứng dụng

export default {
  CREATE_ACCOUNT: 'created account',
  WITHDREW_FROM_ACCOUNT: 'withdrew from account',
  DEPOSITED_INTO_ACCOUNT: 'deposited into account'
};

3, AppDispatcher.js tạo một instant của flux dispatcher 
import {Dispatcher} from 'flux';
export default new Dispatcher();

Chú ý: Có thể extend standard flux dispatcher để log lại mọi action 

import {Dispatcher} from 'flux';

class AppDispatcher extends Dispatcher {
  dispatch(action = {}) {
    console.log('Dispatched', action);
    super.dispatch(action);
  }
}

export default new AppDispatcher();

4, Action Creators
các action trong flux là một object mà chứa type và một lượng data tùy ý.
các functions mà định nghĩa và dispatch các actions được gọi là action creators. 
chúng ta sẽ tạo một file js với 3 action creators (creating account, depositing, withdrawing)
BankActions.js
import AppDispatcher from './AppDispatcher';
import bankConstants from './constants';

let BankActions = {
  createAccount() {
    AppDispatcher.dispatch({
      type: bankConstants.CREATED_ACCOUNT,
      ammount: 0
    });
  },

  depositIntoAccount(ammount) {
    AppDispatcher.dispatch({
      type: bankConstants.DEPOSITED_INTO_ACCOUNT,
      ammount: ammount
    });
  },

  withdrawFromAccount(ammount) {
    AppDispatcher.dispatch({
      type: bankConstants.WITHDREW_FROM_ACCOUNT,
      ammount: ammount
    });
  }
};

export default BankActions;

5, Store
Store sẽ nhận action từ dispatcher và thay đổi state, sau đó phát ra event để view thay đổi, 
để store phát ra event cần cài đặt packages event emitter ví dụ fbemitter
npm install --save fbemitter
hoặc thêm vào package.json:
"fbemitter": "*"

import {EventEmitter} from 'fbemitter';
import AppDispatcher from './AppDispatcher';
import bankConstants from './constants';

const CHANGE_EVENT = 'change';
let __emitter = new EventEmitter();
let balance = 0;

let BankBalanceStore = {
  getState() {
    return balance;
  },
  addListener: (callback) => {
    return __emitter.addListener(CHANGE_EVENT, callback);
  },
};

BankBalanceStore.dispatchToken = AppDispatcher.register((action) => {
  switch(action.type) {
    case bankConstants.CREATED_ACCOUNT:
      balance = 0;
      __emitter.emit(CHANGE_EVENT);
      break;
    case bankConstants.DEPOSITED_INTO_ACCOUNT:
      balance = balance + action.ammount;
      __emitter.emit(CHANGE_EVENT);
      break;
    case bankConstants.WITHDREW_FROM_ACCOUNT:
      balance = balance - action.ammount;
      __emitter.emit(CHANGE_EVENT);
      break;
  }
});
export default BankBalanceStore;

6, view Component, App.js
import React, {Component} from 'react';
import {render} from 'react-dom';
import BankBalanceStore from './BankBalanceStore';
import BankActions from './BankActions';

class App extends Component {
  constructor() {
    super(...arguments);
    BankActions.createAccount();
    this.state = {
      balance: BankBalanceStore.getState()
    }
  }

  componentDidMount() {
    this.storeSubscription = BankBalanceStore.addListener(
      data => this.handleStoreChange(data));
  }

  componentWillUnmount() {
    this.storeSubscription.remove();
  }

  handleStoreChange() {
    this.setState({balance: BankBalanceStore.getState()});
  }

  deposit() {
    BankActions.depositIntoAccount(Number(this.refs.ammount.value));
    this.refs.ammount.value = '';
  }

  withdraw() {
    BankActions.withdrawFromAccount(Number(this.refs.ammount.value));
    this.refs.ammount.value = '';
  }

  render() {
    return (
      <div>
        <header>Flux Trust Bank</header>
        <h1>Your balance is ${(this.state.balance).toFixed(2)}</h1>
        <div className="atm">
          <input type="text" placeholder="Enter Ammount" ref="ammount" /><br />
          <button onClick={this.withdraw.bind(this)}>Withdraw</button>
          <button onClick={this.deposit.bind(this)}>Deposit</button>
        </div>
      </div>
    );
  }
}
render(<App />, document.getElementById('root'));
========================
dùng Store của flux/utils

import AppDispatcher from './AppDispatcher';
import {Store} from 'flux/utils';
import bankConstants from './constants';

let balance = 0;

class BankBlanceStore extends Store {
  getState() {
    return balance;
  }

  __onDispatch(action) {
    switch(action.type) {
      case bankConstants.CREATED_ACCOUNT:
        balance = 0;
        this.__emitChange();
        break;
      case bankConstants.DEPOSITED_INTO_ACCOUNT:
        balance = balance + action.ammount;
        this.__emitChange();
        break;
      case bankConstants.WITHDREW_FROM_ACCOUNT:
        balance = balance - action.ammount;
        this.__emitChange();
        break;
    }
  }
}
export default new BankBlanceStore(AppDispatcher);
=============================
dùng ReduceStore của flux/utils
BankBalanceStore.js
import AppDispatcher from './AppDispatcher';
import bankConstants from './constants';
import {ReduceStore} from 'flux/utils';

class BankBlanceStore extends ReduceStore {
  getInitialState() {
    return 0;
  }

  reduce(state, action) {
    switch(action.type) {
      case bankConstants.CREATED_ACCOUNT:
        return 0;
      case bankConstants.DEPOSITED_INTO_ACCOUNT:
        return state + action.ammount;
      case bankConstants.WITHDREW_FROM_ACCOUNT:
        return state - action.ammount;
      default:
        return state;
    }
  }
}
export default new BankBlanceStore(AppDispatcher);

=================================================
Dùng Container của flux/utils để giảm thiểu code của App.js
import React, {Component} from 'react';
import {render} from 'react-dom';
import {Container} from 'flux/utils';
import BankBalanceStore from './BankBalanceStore';
import BankActions from './BankActions';

class App extends Component {
  constructor() {
    super(...arguments);
    BankActions.createAccount();
  }

  deposit() {
    BankActions.depositIntoAccount(Number(this.refs.ammount.value));
    this.refs.ammount.value = '';
  }

  withdraw() {
    BankActions.withdrawFromAccount(Number(this.refs.ammount.value));
    this.refs.ammount.value = '';
  }

  render() {
    return (
      <div>
        <header>Flux Trust Bank</header>
        <h1>Your balance is ${(this.state.balance).toFixed(2)}</h1>
        <div className="atm">
          <input type="text" placeholder="Enter Ammount" ref="ammount" /><br />
          <button onClick={this.withdraw.bind(this)}>Withdraw</button>
          <button onClick={this.deposit.bind(this)}>Deposit</button>
        </div>
      </div>
    );
  }
}
App.getStores = () => ([BankBalanceStore]);
App.calculateState = (prevState) => ({balance: BankBalanceStore.getState()});
const AppContainer = Container.create(App);
render(<AppContainer />, document.getElementById('root'));

==============================================================
Asynchronous Flux
Ví dụ sau muốn BankRewardsStore được thực hiện sau BankBalanceStore
BankRewardsStore.js:

import AppDispatcher from './AppDispatcher';
import BankBalanceStore from './BankBalanceStore';
import BankConstants from './constants';
import {ReduceStore} from 'flux/utils';

class BankRewardsStore extends ReduceStore {
  getInitialState() {
    return 'Basic';
  }
  reduce(state, action) {
    this.getDispatcher().waitFor([
      BankBalanceStore.getDispatchToken()
    ]);
    if(action.type === BankConstants.DEPOSITED_INTO_ACCOUNT || action.type === BankConstants.WITHDREW_FROM_ACCOUNT) {
      let balance = BankBalanceStore.getState();
      if(balance < 5000)
        return 'Basic';
      else if (balance < 10000)
        return 'Silver';
      else if (balance < 50000)
        return 'Gold';
      else
        return 'Platinum';
    }
    return state;
  }
}
export default new BankRewardsStore(AppDispatcher);

App.js:

import BankRewardsStore from './BankRewardsStore';
...
return (
...
<h2>Your Points Rewards Tier is {this.state.rewardsTier}</h2>
...

App.calculateState = (prevState) => ({
  balance: BankBalanceStore.getState(),
  rewardsTier: BankRewardsStore.getState()
});

================================================================
Asynchronous Data Fetching


)
========================================================
react-auto-suggest là một library để hỗ trợ tạo text field với auto suggest

